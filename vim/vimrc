" Help hints
" jj <ESC>
" ,a :Ack
" ,w vsplit and switch buffers
" ,c* comment visual block
" ,cv git diff
" fugitive - :Gedit, :Gsplit, :Gvsplit, :Gstatus, :Gcommit

set nocompatible
autocmd!
filetype off
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()
filetype plugin indent on
syntax on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set up some basic variables
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General Settings {{{

" Tabs/spaces
set ts=2
set sw=2
set et
set cino=g0,t0,+2,(2,u2,)
set smartindent

" Basic options
set backspace=indent,eol,start " backspacing over everything in insert mode
set autoindent                 " always set autoindenting on
set copyindent                 " copy the previous indetation on autoindenting
set nobackup                   " do not keep a backup file, use versions instead
set history=50                 " keep 50 lines of command line history
set ruler                      " show the cursor position all the time
set showcmd                    " display incomplete commands
set laststatus=2               " Always display the status line
set foldmethod=marker          " Sets the folding method to fold on {{{ }}}
set hidden                     " edit file without losing modifications to current file
set autowrite                  " auto-save a modified buffer when switching
set vb t_vb=                   " disable any beeps or flashes on error
set formatoptions+=n           " Allows for lists in vim
set noequalalways              " prevent's VIM from changing window sizing for taglist
set restorescreen               " Restore screen at exit
"set wildmenu                   " Allows filesystem surfing
"set wildmode=longest,list      " Bash like tab completion
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*.so,*.o,*_ut-d,*_ut-d-z,*_ut-z,*_ut.output,*_ut.test
set pastetoggle=<F2>           " Switch to paste mode when pasting to prevent autoindenting
set grepprg=ack\ $* " How to search

                               " Searching
set ignorecase                 " Ignore case
set smartcase                  " Use intelligen case
set incsearch                  " do incremental searching
set showmatch                  " Jump to the matching brace
set hlsearch                   " highlight search
set gdefault                   " g is a default option for search/replace

set makeprg="bjam -j4"
set printoptions=paper:letter
" }}}

let mapleader=","
set tags=~/.vim/tags/ios.tags

" When vimrc is edited, reload it
" autocmd! bufwritepost vimrc source ~/.vimrc

" Customize Status line color
"highlight StatusLine guifg=SlateBlue guibg=Yellow
"highlight StatusLineNC guifg=Gray guibg=White
"set statusline=%t 
"set statusline=%t\ %{fugitive#statusline()}\ %h%m%r%=%c,%l/%L\ %P
"set statusline=%{fugitive#statusline()}\  " Buffer
"set statusline+=%<%.99f\  " relative path to file
"set statusline+=%h " 
"set statusline+=%w " 
"set statusline+=%m " modified flag
"set statusline+=%r " read-only flag
"set statusline+=%y " filetype
"set statusline+=%=%-16(\ %l/%L,%c\ %)%P
set t_Co=256 " Explicity tell vim that the terminal as 256 colors

set undodir=$HOME/.vim/undodir
set undofile
set undolevels=1000 " maximum number of changes that can be undone
set undoreload=10000 " maximum number of lines to save for undo on a buffer reload

set cscopeprg="ctags -R ."
" Ignore filename with any of these suffixes
set suffixes=.aux,.bak,.dvi,.gz,.idx,.log,.ps,.swp,.tar

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set up mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map Q gq            " Don't use Ex mode, use Q for formatting
map :W :wall
map <C-J> <C-W>w
map <C-K> <C-W>W
nmap <leader>w :w!<cr>
nmap :Q :q
nmap :Wq :wq

" Set up visual mode mappings {{{

" Comment selected text by putting it into register, inserting /* recalling " register */
vmap ,c* "zdi/*<C-R>z*/<ESC>

" Remove trailing whitespace
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>:retab<CR>

" remap the semicolon to act like the colon
nnoremap ; :

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
"nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" Jumps to the next line even if it's a word wrapped line
nnoremap j gj
nnoremap k gk

" When you’re in visual mode D will duplicate whatever’s selected directly below.
vmap D y'>p

" Remap jj to be ESC in insert mode
inoremap jj <ESC>

nmap <leader>b :make<cr>

" Open definition in a vertical split
map <C-\> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Easy buffer navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <leader>v <C-w>v<C-w>l

" }}}

" Plugins {{{
set runtimepath+=~/.vim/bundle/vundle/
call vundle#rc()

" github repos
" Improved commenting
Bundle "scrooloose/nerdcommenter"
" Improved tab completion
Bundle "ervandew/supertab"

"Bundle "vim-scripts/AutoComplPop"
Bundle "Shougo/neocomplcache"
" {{{ neocomplcache
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
    \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <expr><CR>  neocomplcache#smart_close_popup() 
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
"inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()
" AutoComplPop like behavior, auto selects best guess
let g:neocomplcache_enable_auto_select = 1

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
"let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'
" }}}

Bundle "majutsushi/tagbar"
nmap <F4> :TagbarToggle<CR>

Bundle "vim-scripts/vcscommand.vim.git"
Bundle "tpope/vim-fugitive"
" Use html<ctrl-x enter/space> to complete or p<ctrl-x space>
Bundle "tpope/vim-ragtag.git"
Bundle "tpope/vim-rails"
" {{{ :make to build specific to file you're editing
autocmd FileType cucumber compiler cucumber | setl makeprg=cucumber\ \"%:p\"
autocmd FileType ruby
      \ if expand('%') =~# '_test\.rb$' |
      \   compiler rubyunit | setl makeprg=testrb\ \"%:p\" |
      \ elseif expand('%') =~# '_spec\.rb$' |
      \   compiler rspec | setl makeprg=rspec\ \"%:p\" |
      \ else |
      \   compiler ruby | setl makeprg=ruby\ -wc\ \"%:p\" |
      \ endif
autocmd User Bundler
      \ if &makeprg !~# 'bundle' | setl makeprg^=bundle\ exec\  | endif
" }}}
" Better syntax highlighting, use CTRL-] on a step to jump to ruby def
Bundle "tpope/vim-cucumber"
" Add 'end' keyword for ruby files
Bundle "tpope/vim-endwise.git"

Bundle "a.vim"
let g:alternateSearchPath = 'reg:#include#src#g#,reg:#src#include#g,reg:#include/q#src#g#,reg:#src#include/q#g#'
let g:alternateExtensions_cpp = 'h,hpp,ipp'
let g:alternateExtensions_hpp = 'cpp,ipp'
let g:alternateExtensions_ipp = 'cpp,hpp'
let g:alternateNoDefaultAlternate = 1

Bundle "kien/ctrlp.vim"

" The three below are for the new snipmate
Bundle "tomtom/tlib_vim"
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "snipmate-snippets"
Bundle "garbas/vim-snipmate"
Bundle "nathasm/snipmate-snippets-rubymotion"

Bundle "Lokaltog/vim-powerline"
let g:Powerline_symbols = 'fancy'   " Powerline

" Syntax checking for files
Bundle "scrooloose/syntastic.git"

Bundle "guileen/vim-node"
au FileType javascript set dictionary+=$HOME/.vim/bundle/vim-node/dict/node.dict

" }}}

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Remove trailing whitespace on opening of a new file
  "autocmd BufWritePre * :%s/\s\+$//e
  autocmd FileType c,*pp,java,php,rb autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))

  " This will run java.vim plugin only if it's a java file
  au BufNewFile,BufRead *.cop source ${HOME}/.vim/ftplugin/cop.vim
  au BufNewFile,BufRead *.jam source ${HOME}/.vim/ftplugin/jamfile.vim
  au BufNewFile,BufRead Jamfile source ${HOME}/.vim/ftplugin/jamfile.vim
  au BufNewFile,BufRead Jamrules source ${HOME}/.vim/ftplugin/jamfile.vim
  au BufNewFile,BufRead *ipp set ft=c

  " Make sure we use tabs with Makefiles
  " au BufEnter *akefile* set noet
  " au BufEnter *akefile* set noautoindent
  au BufEnter makeinclude.macros set ft=make
  au BufEnter *akefile* set ft=make
  au FileType make set noet
  au FileType make set noai

  " For all text files set 'textwidth' to 8 characters.
  autocmd FileType text setlocal textwidth=78
  autocmd FileType tex setlocal textwidth=78
  autocmd FileType mail setlocal spell spelllang=en_us

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Mutt settings
  "au FileType mail set ai et list tw=72
  "au FileType mail set listchars=tab:>>,trail:.
  "au FileType mail set comments=fb:*,fb:-,nb:>
  "au FileType mail set fo=cqrtn
  "au FileType mail set nosmartindent


endif " has("autocmd")

"
" This allows for tab completion of variables
"
function! InsertTabWrapper(direction)
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  elseif "backward" == a:direction
    return "\<c-p>"
  else
    return "\<c-n>"
  endif
endfunction

function! Smart_TabComplete()
  let line = getline('.')                         " current line

  let substr = strpart(line, -1, col('.')+1)      " from the start of the current
                                                  " line to one character right
                                                  " of the cursor
  let substr = matchstr(substr, "[^ \t]*$")       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
    return "\<tab>"
  endif
  let has_period = match(substr, '\.') != -1      " position of period, if any
  let has_slash = match(substr, '\/') != -1       " position of slash, if any
  if (!has_period && !has_slash)
    return "\<C-X>\<C-P>"                         " existing text matching
  elseif ( has_slash )
    return "\<C-X>\<C-F>"                         " file matching
  else
    return "\<C-X>\<C-O>"                         " plugin matching
  endif
endfunction

"inoremap <tab> <c-r>=Smart_TabComplete()<CR>
"inoremap <tab> <c-r>=InsertTabWrapper ("forward")<cr>
"inoremap <s-tab> <c-r>=InsertTabWrapper ("backward")<cr>
let g:snips_trigger_key="<tab>"

" Include this in your ~/.vimrc file and invoke it with ":call
" FoldProperties()" when viewing the output of "svn diff" to hide the
" property-change noise:
function FoldProperties()
  set nows
  :1
  while 1
    try
      /^Property/
      mark a
      try
        /^Index:/-1
      catch
        :$
      endt
      mark b
      :'a,'bfo
    catch
      break
    endt
  endw
  :1
  set ws
endf

"
" Color setup
"
highlight Normal guibg=Black guifg=White
highlight Comment ctermfg=red
highlight Pmenu    guifg=#ffffff guibg=#202020 ctermfg=255 ctermbg=238
highlight PmenuSel    guifg=#000000 guibg=#b1d631 ctermfg=0 ctermbg=148
if &diff
  colorscheme evening
endif
